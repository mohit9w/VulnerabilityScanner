package org.vs.cvedetails;

import okhttp3.Call;
import org.vs.cvedetails.handler.VulnApi;
import org.vs.cvedetails.invoker.*;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VsVulnApi extends VulnApi {

    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VsVulnApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VsVulnApi(ApiClient localVarApiClient) {
        super(localVarApiClient);
        this.localVarApiClient = localVarApiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        super.setHostIndex(hostIndex);
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        super.setCustomBaseUrl(customBaseUrl);
        this.localCustomBaseUrl = customBaseUrl;
    }


    @Override
    public Call userVulnListByVpvCall(String vendorName, String productType, String productName, String versionString, Integer exploitExists, Integer isInCISAKEV, LocalDate publishDateStart, LocalDate publishDateEnd, LocalDate updateDateStart, LocalDate updateDateEnd, LocalDate cisaExploitAddDateStart, LocalDate cisaExploitAddDateEnd, LocalDate cisaActionDueDateStart, LocalDate cisaActionDueDateEnd, Integer maxCvssBaseMin, Integer maxCvssBaseMax, Integer epssPercentMin, Integer epssPercentMax, Integer isOverflow, Integer isMemoryCorruption, Integer isSqlInjection, Integer isXss, Integer isDirectoryTraversal, Integer isFileInclusion, Integer isCsrf, Integer isXxe, Integer isSsrf, Integer isOpenRedirect, Integer isInputValidation, Integer isCodeExecution, Integer isBypass, Integer isGainPrivilege, Integer isDenialOfService, Integer isInformationLeak, String outputFormat, Integer pageNumber, Integer resultsPerPage, ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vulnerability/list-by-vpv";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (vendorName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vendorName", vendorName));
        }

        if (productType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productType", productType));
        }

        if (productName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productName", productName));
        }

        if (versionString != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("versionString", versionString));
        }

        if (exploitExists != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exploitExists", exploitExists));
        }

        if (isInCISAKEV != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isInCISAKEV", isInCISAKEV));
        }

        if (publishDateStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("publishDateStart", publishDateStart));
        }

        if (publishDateEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("publishDateEnd", publishDateEnd));
        }

        if (updateDateStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateDateStart", updateDateStart));
        }

        if (updateDateEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateDateEnd", updateDateEnd));
        }

        if (cisaExploitAddDateStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cisaExploitAddDateStart", cisaExploitAddDateStart));
        }

        if (cisaExploitAddDateEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cisaExploitAddDateEnd", cisaExploitAddDateEnd));
        }

        if (cisaActionDueDateStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cisaActionDueDateStart", cisaActionDueDateStart));
        }

        if (cisaActionDueDateEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cisaActionDueDateEnd", cisaActionDueDateEnd));
        }

        if (maxCvssBaseMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCvssBaseMin", maxCvssBaseMin));
        }

        if (maxCvssBaseMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCvssBaseMax", maxCvssBaseMax));
        }

        if (epssPercentMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("epssPercentMin", epssPercentMin));
        }

        if (epssPercentMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("epssPercentMax", epssPercentMax));
        }

        if (isOverflow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isOverflow", isOverflow));
        }

        if (isMemoryCorruption != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isMemoryCorruption", isMemoryCorruption));
        }

        if (isSqlInjection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isSqlInjection", isSqlInjection));
        }

        if (isXss != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isXss", isXss));
        }

        if (isDirectoryTraversal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isDirectoryTraversal", isDirectoryTraversal));
        }

        if (isFileInclusion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isFileInclusion", isFileInclusion));
        }

        if (isCsrf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isCsrf", isCsrf));
        }

        if (isXxe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isXxe", isXxe));
        }

        if (isSsrf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isSsrf", isSsrf));
        }

        if (isOpenRedirect != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isOpenRedirect", isOpenRedirect));
        }

        if (isInputValidation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isInputValidation", isInputValidation));
        }

        if (isCodeExecution != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isCodeExecution", isCodeExecution));
        }

        if (isBypass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isBypass", isBypass));
        }

        if (isGainPrivilege != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isGainPrivilege", isGainPrivilege));
        }

        if (isDenialOfService != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isDenialOfService", isDenialOfService));
        }

        if (isInformationLeak != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isInformationLeak", isInformationLeak));
        }

        if (outputFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputFormat", outputFormat));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (resultsPerPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resultsPerPage", resultsPerPage));
        }

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{"bearerAuth"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
}
