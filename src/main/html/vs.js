$(function() {
   $("#softwareListBody").empty();
    $("#vsscanner").click(function(e){
        /*findVulns();*/

        $.ajax({
            type: "GET",
            url: "http://127.0.0.1:8080/api/vs/findlocal",
            dataType: "json",
            crossDomain:true,
            success: function (result, status, xhr) {
                populateSoftwareTable(result);
            },
            error: function (xhr, status, error) {
                alert("Result: " + status + " " + error + " " + xhr.status + " " + xhr.statusText)
            }
        });
    }
  )
});


function populateSoftwareTable(result){
    console.log(result);
    $("#softwareListBody").empty();
    let sftwrTableBody = document.getElementById("softwareListBody");
    //let sftwrTableBody = $("#softwareListBody");

    $.each(result, function(index, item) {
        let idIndex = parseInt(index)+1;
        let tr = document.createElement("tr");

        let th = document.createElement("th");
        th.setAttribute("scope","row");
        th.setAttribute("id","th"+idIndex);
        th.innerHTML = idIndex;
        tr.appendChild(th);

        let td0 = document.createElement("td");
        td0.setAttribute("id","name"+idIndex);
        td0.innerHTML = item.name;
        tr.appendChild(td0);

        let td1 = document.createElement("td");
        td1.setAttribute("id","version"+idIndex);
        td1.innerHTML = item.version;
        tr.appendChild(td1);

        let td2 = document.createElement("td");
        td2.setAttribute("id","vendor"+idIndex);
        td2.innerHTML = item.vendor;
        tr.appendChild(td2);

        let td3 = document.createElement("td");
        td3.setAttribute("id","CVE"+idIndex);
        td3.innerHTML = "&nbsp;";
        tr.appendChild(td3);

        let td4 = document.createElement("td");
        td4.setAttribute("id","summary"+idIndex);
        td4.innerHTML = "&nbsp;";
        tr.appendChild(td4);

        let td5 = document.createElement("td");
        td5.setAttribute("id","btn" + idIndex);
        td5.innerHTML = buildCVEButton(item.name,item.version,item.vendor,idIndex);
        tr.appendChild(td5);

        sftwrTableBody.appendChild(tr);

    });
}

function buildSummary(cveDetail){
    if(cveDetail.hasOwnProperty('summary')){
        return cveDetail.summary;
    }else{
        return "&nbsp;";
    }
}
function buildCVE(cveDetail, cveColumn){

    if(cveDetail.hasOwnProperty("cveId")){
        if (cveColumn.innerText.trim().length == 0){
            return "<a href=\"" + cveDetail.cveLink + "\">" + cveDetail.cveId + "</a>";
        }else{
            return cveColumn.innerHTML + "<br><a href=\"" + cveDetail.cveLink + "\">" + cveDetail.cveId + "</a>"
        }
    }else{
        return "&nbsp;";
    }
}

function buildCVEButton(name,version, vendor, idIndex){
    return "<button type=\"button\" class=\"btn btn-primary\" onClick=\"findCVE('" + name + "','" + version + "','" + vendor + "','" + idIndex + "')\">Check For CVE</button>";
}

function findCVE(name,version,vendor,idIndex){
    let map = new Map();
    map.set("name", name);
    map.set("version", version);
    map.set("vendor", vendor);
    $.ajax({
                type: "GET",
                contentType: 'application/json',
                url: "http://127.0.0.1:8080/api/vs/cvecheck",
                dataType: "json",
                data: Object.fromEntries(map),
                crossDomain:true,
                success: function (result, status, xhr) {
                    updateRow(idIndex,result);
                },
                error: function (xhr, status, error) {
                    alert("Result: " + status + " " + error + " " + xhr.status + " " + xhr.statusText)
                }
            });
}

function updateRow(idIndex,result){
    const vendorColumn = document.getElementById("vendor"+idIndex);
    const summaryColumn = document.getElementById("summary"+idIndex);
    const cveColumn = document.getElementById("CVE"+idIndex);
    if(result.cveDetailsList.length > 0){
            $.each(result.cveDetailsList, function(index, cveDetail) {
                vendorColumn.innerHTML = result.vendor;
                summaryColumn.innerHTML = buildSummary(cveDetail);
                cveColumn.innerHTML = buildCVE(cveDetail, cveColumn);
            });
        } else{
            summaryColumn.innerHTML = "No CVE Found";
        }
}