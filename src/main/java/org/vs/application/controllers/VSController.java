package org.vs.application.controllers;


import com.google.gson.Gson;
import org.apache.commons.exec.OS;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.vs.application.CVEFinder;
import org.vs.application.model.CVEResult;
import org.vs.application.services.interfaces.SoftwareFinderService;
import org.vs.cvedetails.invoker.JSON;

import java.io.IOException;

@RestController
@RequestMapping("/api/vs")
public class VSController {
    private static final Gson gson = JSON.createGson().setLenient().create();

    @Autowired
    CVEFinder cveFinder;

    @Autowired
    SoftwareFinderService softwareFinderService;

    @GetMapping("/findlocal")
    public String findLocalSoftwares() {
        if (cveFinder != null && OS.isFamilyWindows()) {
            //List<CVEResult> results = cveFinder.findAllJsonCve();
            try {
                JSON.setGson(gson);
                System.out.println("request received!");
                String result = JSON.serialize(softwareFinderService.findInstalledSoftware());
                System.out.println("Returning result now.....");
                return result;
            } catch (IOException | InterruptedException e) {
                throw new RuntimeException(e);
            }
        } else {
            //TODO: use unix one here
            System.out.println("sending failure message...");
            return "{ \"error\": \"Unknown Error\"";
        }
    }

    @GetMapping("/cvecheck")
    public CVEResult fetchCVEDetails(@RequestParam String name, @RequestParam String version, @RequestParam String vendor) {
        System.out.println("trying to find CVE related to name: " + name + ", version: " + version + ", vendor: " + vendor);
        CVEResult result = cveFinder.findListedCVE(name, version, vendor);
        System.out.println("Returning result now.....");
        return result;
    }
    /*@PostMapping
    public String createUser(@RequestBody String user) {
        users.add(user);
        return "User created: " + user;
    }
    @DeleteMapping("/{user}")
    public String deleteUser(@PathVariable String user) {
        if (users.contains(user)) {
            users.remove(user);
            return "User deleted: " + user;
        }
        return "User not found";
    }*/
}
